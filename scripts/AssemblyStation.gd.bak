extends Node2D

@export var required_sequence: Array[String] = ["dough", "tomato", "cheese"]

var collected: Array[String] = []
var pizza_ready: bool = false

func _ready() -> void:
	add_to_group("assembly")
	_update_visual()

func get_needed_type() -> String:
	if pizza_ready:
		return ""
	if collected.size() < required_sequence.size():
		return required_sequence[collected.size()]
	return ""

func try_use_station(player: Node) -> void:
	if player == null or not player.has_method("get"):
		return
	if pizza_ready:
		pizza_ready = false
		collected.clear()
		_update_visual()
		_get_main().show_message("Plan remis à zéro")
		return
	var held = player.get("held_item") as Node
	if held == null:
		return
	var t: String = held.get("item_type") if held.has_method("get") else ""
	if t == get_needed_type():
		held.queue_free()
		player.set("held_item", null)
		collected.append(t)
		_get_main().show_message("Ingrédient %s accepté (%d/%d)" % [t, collected.size(), required_sequence.size()])
		if collected.size() == required_sequence.size():
			pizza_ready = true
			_get_main().show_message("Pizza prête !")
		_update_visual()

func _update_visual() -> void:
	var spr: Sprite2D = $Sprite
	if pizza_ready:
		spr.modulate = Color(0.2, 1.0, 0.3, 1)
	else:
		var r = 0.6 - 0.2 * float(collected.size())
		var b = 0.6 + 0.2 * float(collected.size())
		spr.modulate = Color(r, 0.6, b, 1)

func _get_main() -> Node:
	return get_tree().get_first_node_in_group("root") if get_tree() else get_parent() 